<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve" width="512px" height="512px" class=""><g><script xmlns="" id="metastreaminitscript" class="active-path" style="">(function() {
    document.getElementById('metastreaminitscript').remove()

    const INIT_TIMEOUT = 5e3
    const isFirefox = navigator.userAgent.toLowerCase().includes('firefox')

    //=========================================================================
    // document.createElement proxy
    //=========================================================================

    window.__metastreamMediaElements = new Set()

    // Proxy document.createElement to trap media elements created in-memory
    const origCreateElement = document.createElement
    const proxyCreateElement = function() {
      const element = origCreateElement.apply(document, arguments)
      if (window.__metastreamMediaElements &amp;&amp; element instanceof HTMLMediaElement) {
        window.__metastreamMediaElements.add(element)
      }
      return element
    }
    proxyCreateElement.toString = origCreateElement.toString.bind(origCreateElement)
    document.createElement = proxyCreateElement

    setTimeout(() =&gt; {
      if (window.__metastreamMediaElements) {
        window.__metastreamMediaElements.clear()
        window.__metastreamMediaElements = undefined
      }
    }, INIT_TIMEOUT)

    //=========================================================================
    // navigator.mediaSession proxy (Firefox)
    //=========================================================================

    if (isFirefox) {
      // stub out MediaSession API until Firefox supports this natively
      if (!navigator.mediaSession) {
        const noop = () =&gt; {}
        const mediaSessionStub = {
          __installedByMetastreamRemote__: true,
          setActionHandler: noop
        }
        Object.defineProperty(window.navigator, 'mediaSession', {
          value: mediaSessionStub,
          enumerable: false,
          writable: true
        })

        function MediaMetadata(metadata) {
          Object.assign(this, metadata)
        }
        window.MediaMetadata = MediaMetadata
      }

      const { mediaSession } = navigator

      // Capture action handlers for player.js proxy
      mediaSession._handlers = {}

      const _setActionHandler = mediaSession.setActionHandler
      mediaSession.setActionHandler = function(name, handler) {
        mediaSession._handlers[name] = handler
        _setActionHandler.apply(mediaSession, arguments)
      }
    }

    //=========================================================================
    // document.domain fix (Firefox)
    //=========================================================================

    if (isFirefox) {
      const domains = ['twitch.tv', 'crunchyroll.com']

      // Fix for setting document.domain in sandboxed iframe
      try {
        const { domain } = document
        if (domain &amp;&amp; domains.some(d =&gt; domain.includes(d))) {
          Object.defineProperty(document, 'domain', {
            value: domain,
            writable: true
          })
        }
      } catch (e) {}
    }

    //=========================================================================
    // Inline script embed prevention fix
    //=========================================================================

    const observeScripts = () =&gt; {
      const scriptSnippets = [
        { code: 'window.top !== window.self', replacement: 'false' },
        { code: 'self == top', replacement: 'true' },
        { code: 'top.location != window.location', replacement: 'false' }
      ]

      const getAddedScripts = mutationList =&gt;
        mutationList.reduce((scripts, mutation) =&gt; {
          if (mutation.type !== 'childList') return scripts
          const inlineScripts = Array.from(mutation.addedNodes).filter(
            node =&gt; node instanceof HTMLScriptElement &amp;&amp; node.textContent.length &gt; 0
          )
          return inlineScripts.length &gt; 0 ? [...scripts, ...inlineScripts] : scripts
        }, [])

      // Modifies inline scripts to allow embedding content in iframe
      const inlineScriptModifier = mutationsList =&gt; {
        const scripts = getAddedScripts(mutationsList)
        for (let script of scripts) {
          for (let snippet of scriptSnippets) {
            if (script.textContent.includes(snippet.code)) {
              script.textContent = script.textContent.split(snippet.code).join(snippet.replacement)
            }
          }
        }
      }

      const observer = new MutationObserver(inlineScriptModifier)
      observer.observe(document.documentElement, { childList: true, subtree: true })

      // Stop watching for changes after we finish loading
      window.addEventListener('load', () =&gt; observer.disconnect())
    }

    observeScripts()
  }());</script><g>
	<g>
		<path d="M346.001,209.991c-24.813,0-44.998,20.185-44.998,44.998s20.185,44.998,44.998,44.998s44.798-20.185,44.798-44.998    S370.815,209.991,346.001,209.991z" data-original="#000000" class="active-path" fill="#FFFFFF"/>
	</g>
</g><g>
	<g>
		<path d="M476.103,270.984c15.614-74.748-7.002-151.107-60.993-205.084C372.572,23.407,316.09,0,256.005,0    S139.438,23.407,96.901,65.9C42.93,119.871,20.249,196.223,35.907,270.984c-6.152,17.943-6.475,37.088-0.967,55.691    c10.163,34.031,39.629,60.053,86.07,63.234v59.027c0,18.178,10.693,34.408,27.274,41.351c9.009,3.777,20.191,7.663,32.524,11.271    V464.98c0-8.291,6.909-14.999,15.199-14.999c8.291,0,14.999,6.709,14.999,14.999v43.523c9.558,1.718,19.336,2.842,29.799,3.497    v-47.02c0-8.291,6.909-14.999,15.199-14.999s14.999,6.709,14.999,14.999V512c10.463-0.656,20.241-1.78,29.799-3.497V464.98    c0-8.291,6.909-14.999,15.199-14.999s14.999,6.709,14.999,14.999v36.58c12.331-3.609,23.715-7.495,32.724-11.272    c16.581-6.943,27.074-23.173,27.074-41.351v-59.102c47.311-2.999,76.567-29.523,86.475-63.981    C482.577,307.502,482.138,288.621,476.103,270.984z M166.009,330.186c-41.365,0-75.197-33.846-75.197-75.197    s33.832-75.197,75.197-75.197c41.365,0,75.197,33.846,75.197,75.197C241.205,296.34,207.374,330.186,166.009,330.186z     M286.004,389.983h-59.997c-13.348,0-19.989-16.188-10.605-25.604l29.999-29.999c5.859-5.859,15.351-5.859,21.21,0l29.999,29.999    C305.993,373.795,299.352,389.983,286.004,389.983z M346.001,330.186c-41.365,0-75.197-33.846-75.197-75.197    s33.832-75.197,75.197-75.197s75.197,33.846,75.197,75.197C421.198,296.34,387.366,330.186,346.001,330.186z" data-original="#000000" class="active-path" fill="#FFFFFF"/>
	</g>
</g><g>
	<g>
		<path d="M166.009,209.991c-24.813,0-44.998,20.185-44.998,44.998s20.185,44.998,44.998,44.998    c24.813,0,44.798-20.185,44.798-44.998S190.823,209.991,166.009,209.991z" data-original="#000000" class="active-path" fill="#FFFFFF"/>
	</g>
</g></g> </svg>
